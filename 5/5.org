* Part 1
You come across a field of hydrothermal vents on the ocean floor! These vents
constantly produce large, opaque clouds, so it would be best to avoid them if
possible.

They tend to form in lines; the submarine helpfully produces a list of nearby
lines of vents (your puzzle input) for you to review. For example:

0,9 -> 5,9
8,0 -> 0,8
9,4 -> 3,4
2,2 -> 2,1
7,0 -> 7,4
6,4 -> 2,0
0,9 -> 2,9
3,4 -> 1,4
0,0 -> 8,8
5,5 -> 8,2

Each line of vents is given as a line segment in the format x1,y1 -> x2,y2 where
x1,y1 are the coordinates of one end the line segment and x2,y2 are the
coordinates of the other end. These line segments include the points at both
ends. In other words:

An entry like 1,1 -> 1,3 covers points 1,1, 1,2, and 1,3. An entry like 9,7 ->
7,7 covers points 9,7, 8,7, and 7,7. For now, only consider horizontal and
vertical lines: lines where either x1 = x2 or y1 = y2.

So, the horizontal and vertical lines from the above list would produce the
following diagram:

.......1..
..1....1..
..1....1..
.......1..
.112111211
..........
..........
..........
..........
222111....

In this diagram, the top left corner is 0,0 and the bottom right corner is 9,9.
Each position is shown as the number of lines which cover that point or . if no
line covers that point. The top-left pair of 1s, for example, comes from 2,2 ->
2,1; the very bottom row is formed by the overlapping lines 0,9 -> 5,9 and 0,9
-> 2,9.

To avoid the most dangerous areas, you need to determine the number of points
where at least two lines overlap. In the above example, this is anywhere in the
diagram with a 2 or larger - a total of 5 points.

Consider only horizontal and vertical lines. At how many points do at least two
lines overlap?

** Ruby
*** Representing Line Segments
We can use a sparse representation of the grid since most of the points won't be
covered by any line segments.

#+name: parse_line_segments
#+begin_src ruby
  def parse_line_segments(lines)
    map = {}

    lines.each do |line|
      point1, _, point2 = line.split
      x1, y1 = point1.split(',').map(&:to_i)
      x2, y2 = point2.split(',').map(&:to_i)
      if x1 == x2
        range = ([y1, y2].min..[y1, y2].max).map { |y| [x1, y] }
      elsif y1 == y2
        range = ([x1, x2].min..[x1, x2].max).map { |x|  [x, y1] }
      else
        next
      end

      range.each do |point|
        map[point] ||= 0
        map[point] += 1
      end
    end

    map
  end
#+end_src

#+begin_src ruby :noweb yes :tangle part1.rb
  <<parse_line_segments>>

  lines = File.readlines('input')
  map = parse_line_segments(lines)
  map.select { |k, v| v > 1 }.count
#+end_src

#+RESULTS:
: 6548

*** Benchmarking
#+begin_src ruby :results output :noweb yes
  require 'benchmark'

  <<parse_line_segments>>
  
  lines = File.readlines('input')

  report = Benchmark.measure do
    1000.times do
      map = parse_line_segments(lines)
      map.select { |k, v| v > 1 }.count
    end
  end

  puts report
#+end_src

#+RESULTS:
: 241.146615   1.389249 242.535864 (244.697031)

*** Improvements

If there are significantly fewer points covered by individual line segments than
points of intersection, the above solution wastes a lot of space and time
tracking irrelevant points in the grid. Since we're only dealing with vertical
and horizontal lines, we can take advantage of the fact that for a horizontal
line segment, any other line segment that intersects it must either be:
  - A horizontal line with the same y coordinate with one of its terminal points
    inside the first line segment
  - A vertical line whose x coordinate is within the bounds of the first line
    segment and where the y coordinate of the first line segment is within the
    bounds of the vertical line segment
    
If we store horizontal and vertical lines by the y or x coordinate along which
they run (respectively), we can efficiently look up the other line segments that
might intersect it.

#+name: parse_line_segments_improved
#+begin_src ruby
  require 'set'
  Struct.new('LineSegment', :point1, :point2, keyword_init: true)
  Struct.new('Point', :x, :y, keyword_init: true)

  def parse_line_segments(lines)
    horizontal_lines = {}
    vertical_lines = {}

    lines.each do |line|
      point1, _, point2 = line.split
      x1, y1 = point1.split(',').map(&:to_i)
      x2, y2 = point2.split(',').map(&:to_i)
      if x1 == x2
        vertical_lines[x1] ||= []
        vertical_lines[x1] << Struct::LineSegment.new(
          point1: Struct::Point.new(x: x1, y: [y1, y2].min),
          point2: Struct::Point.new(x: x1, y: [y1, y2].max),
        )
      elsif y1 == y2
        horizontal_lines[y1] ||= []
        horizontal_lines[y1] << Struct::LineSegment.new(
          point1: Struct::Point.new(x: [x1, x2].min, y: y1),
          point2: Struct::Point.new(x: [x1, x2].max, y: y1),
        )
      end
    end

    [horizontal_lines, vertical_lines]
  end

  def number_of_intersections(horizontal_lines, vertical_lines)
    intersecting_points = Set.new

    horizontal_lines.each do |y, lines|
      lines.each_with_index do |line, index|
        find_parallel_intersections!(line, lines[...index] + lines[index+1..], intersecting_points, :x)
        perpindicular_candidates = vertical_lines.select { |x| x.between?(line.point1.x, line.point2.x) }.values.flatten
        find_perpindicular_intersections!(line, perpindicular_candidates, intersecting_points, :x)
      end
    end

    vertical_lines.each do |x, lines|
      lines.each_with_index do |line, index|
        find_parallel_intersections!(line, lines[...index] + lines[index+1..], intersecting_points, :y)
        perpindicular_candidates = horizontal_lines.select { |y| y.between?(line.point1.y, line.point2.y) }.values.flatten
        find_perpindicular_intersections!(line, perpindicular_candidates, intersecting_points, :y)
      end
    end

    intersecting_points.length
  end

  def find_parallel_intersections!(segment, other_segments, intersections, axis)
    other_segments.each do |other_segment|
      if parallel_segments_intersect?(segment, other_segment, axis)
        add_parallel_intersections!(segment, other_segment, intersections, axis)
      end
    end
  end

  def parallel_segments_intersect?(segment1, segment2, axis)
    [segment1.point1, segment1.point2].any? do |point|
      point.send(axis).between?(segment2.point1.send(axis), segment2.point2.send(axis))
    end
  end

  def add_parallel_intersections!(segment1, segment2, intersections, axis)
    other_axis = [:x, :y].reject { |a| a == axis }.first
    start = [segment1.point1.send(axis), segment2.point1.send(axis)].max
    finish = [segment1.point2.send(axis), segment2.point2.send(axis)].min
    (start..finish).each do |i|
      point = Struct::Point.new
      point.send("#{other_axis}=", segment1.point1.send(other_axis))
      point.send("#{axis}=", i)
      intersections.add(point)
    end
  end

  def find_perpindicular_intersections!(segment, other_segments, intersections, axis)
    other_segments.each do |other_segment|
      if perpindicular_segments_intersect?(segment, other_segment)
        add_perpindicular_intersections!(segment, other_segment, intersections)
      end
    end
  end

  def perpindicular_segments_intersect?(segment1, segment2)
    if segment1.point1.x == segment1.point2.x
      segment1.point1.x.between?(segment2.point1.x, segment2.point2.x)
    else
      segment1.point1.y.between?(segment2.point1.y, segment2.point2.y)
    end
  end

  def add_perpindicular_intersections!(segment1, segment2, intersections)
    if segment1.point1.x == segment1.point2.x
      intersections.add(Struct::Point.new(x: segment1.point1.x, y: segment2.point1.y))
    else
      intersections.add(Struct::Point.new(x: segment2.point1.x, y: segment1.point1.y))
    end
  end
#+end_src

#+begin_src ruby :noweb yes :tangle part1_improved.rb
  <<parse_line_segments_improved>>

  lines = File.readlines('input')
  horizontal, vertical = parse_line_segments(lines)
  number_of_intersections(horizontal, vertical)
#+end_src

#+RESULTS:
: 6548

**** Benchmarking
#+begin_src ruby :results output :noweb yes
  require 'benchmark'

  <<parse_line_segments_improved>>

  lines = File.readlines('input')

  report = Benchmark.measure do
    1000.times do
      horizontal, vertical = parse_line_segments(lines)
      number_of_intersections(horizontal, vertical)
    end
  end

  puts report
#+end_src

#+RESULTS:
:  53.162298   0.309004  53.471302 ( 53.971297)


* Part 2

Unfortunately, considering only horizontal and vertical lines doesn't give you
the full picture; you need to also consider diagonal lines.

Because of the limits of the hydrothermal vent mapping system, the lines in your
list will only ever be horizontal, vertical, or a diagonal line at exactly 45
degrees. In other words:

An entry like 1,1 -> 3,3 covers points 1,1, 2,2, and 3,3. An entry like 9,7 ->
7,9 covers points 9,7, 8,8, and 7,9. Considering all lines from the above
example would now produce the following diagram:

1.1....11.
.111...2..
..2.1.111.
...1.2.2..
.112313211
...1.2....
..1...1...
.1.....1..
1.......1.
222111....

You still need to determine the number of points where at least two lines
overlap. In the above example, this is still anywhere in the diagram with a 2 or
larger - now a total of 12 points.

Consider all of the lines. At how many points do at least two lines overlap?

** Ruby
#+name: parse_line_segments_part_2
#+begin_src ruby
   def parse_line_segments(lines)
    map = {}

    lines.each do |line|
      point1, _, point2 = line.split
      x1, y1 = point1.split(',').map(&:to_i)
      x2, y2 = point2.split(',').map(&:to_i)
      if x1 == x2
        range = ([y1, y2].min..[y1, y2].max).map { |y| [x1, y] }
      elsif y1 == y2
        range = ([x1, x2].min..[x1, x2].max).map { |x|  [x, y1] }
      else
        if x1 < x2
          x_range = (x1..x2)
        else
          x_range = x1.downto(x2)
        end

        if y1 < y2
          y_range = ([y1, y2].min..[y1, y2].max)
        else
          y_range = y1.downto(y2)
        end
      
        range = x_range.zip(y_range).to_a
      end

      range.each do |point|
        map[point] ||= 0
        map[point] += 1
      end
    end

    map
  end
#+end_src

#+begin_src ruby :noweb yes :tangle part2.rb
  <<parse_line_segments_part_2>>

  lines = File.readlines('input')
  map = parse_line_segments(lines)
  map.select { |k, v| v > 1 }.count
#+end_src

#+RESULTS:
: 19663
