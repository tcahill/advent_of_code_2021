* Part 2
  Considering every single measurement isn't as useful as you expected: there's
  just too much noise in the data. Instead, consider sums of a three-measurement
  sliding window. Again considering the above example:

  199  A      
  200  A B    
  208  A B C  
  210    B C D
  200  E   C D
  207  E F   D
  240  E F G  
  269    F G H
  260      G H
  263        H

  Start by comparing the first and second three-measurement windows. The
  measurements in the first window are marked A (199, 200, 208); their sum is
  199 + 200 + 208 = 607. The second window is marked B (200, 208, 210); its sum
  is 618. The sum of measurements in the second window is larger than the sum of
  the first, so this first comparison increased. Your goal now is to count the
  number of times the sum of measurements in this sliding window increases from
  the previous sum. So, compare A with B, then compare B with C, then C with D,
  and so on. Stop when there aren't enough measurements left to create a new
  three-measurement sum. In the above example, the sum of each three-measurement
  window is as follows:

  A: 607 (N/A - no previous sum)
  B: 618 (increased)
  C: 618 (no change)
  D: 617 (decreased)
  E: 647 (increased)
  F: 716 (increased)
  G: 769 (increased)
  H: 792 (increased)

  In this example, there are 5 sums that are larger than the previous sum.
  Consider sums of a three-measurement sliding window. How many sums are larger
  than the previous sum?

* Ruby
#+NAME: initial_solution
#+begin_src ruby :exports both
  increasing_depth_count = 0
  window = []
  previous_window_reading = nil

  File.readlines('input').each do |line|
    depth = line.to_i
    window << depth

    next if window.length < 3

    window_reading = window.sum
    if previous_window_reading && previous_window_reading < window_reading
      increasing_depth_count += 1
    end
    previous_window_reading = window_reading
    window.shift
  end

  increasing_depth_count
#+end_src

#+RESULTS: initial_solution
: 1704

** Profiling

#+begin_src ruby :noweb yes :results output
  require 'ruby-prof'

  profile = RubyProf.profile do
    1000.times do
      <<initial_solution>>
    end
  end

  printer = RubyProf::GraphHtmlPrinter.new(profile)
  printer.print(File.open('part_2_ruby_profile.html', 'w'))
#+end_src

#+RESULTS:

[[file:./part_2_ruby_profile.html][Result
]]
* Rust

#+begin_src rust :exports both :tangle rust/src/main.rs
  use std::fs::File;
  use std::io::{BufRead, BufReader};

  fn main() {
      let f = File::open("input").expect("Unable to open file");
      let buf = BufReader::new(f);

      let mut increasing_depth_count = 0;
      let mut window = Vec::new();
      let mut previous_window_reading: Option<i32> = None;

      for line in buf.lines() {
          let line = line.expect("Unable to read line");
          let depth = line.parse::<i32>().unwrap();
          window.push(depth);

          if window.len() < 3 {
              continue;
          }

          let window_reading: i32 = window.iter().sum();
          if previous_window_reading.is_some() && previous_window_reading.unwrap() < window_reading {
              increasing_depth_count += 1;
          }
          previous_window_reading = Some(window_reading);
          window.remove(0);
      }
      println!("{}", increasing_depth_count);
  }
#+end_src

#+RESULTS:
: 1704

** Profiling

#+begin_src bash
  cd rust
  cargo flamegraph --dev
#+end_src

[[file:./rust/flamegraph.svg][Flame Graph]]
